#include <stdio.h>
#include <stdlib.h>
#include<iostream>
#include <limits.h>

using namespace std;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node
{
    int data;
    struct node* left;
    struct node* right;
};

/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newNode(int data)
{
  struct node* node = (struct node*)
                      malloc(sizeof(struct node));
  node->data = data;
  node->left = NULL;
  node->right = NULL;

  return(node);
}

int maxSizeUtiliy(node *root,int &maxi,int &mini,int &bst,int &count)
{
    if(root==NULL)
    {
        bst = 1;
        count = 0;
        return 0;
    }
    if(root->left==NULL&&root->right==NULL)
    {
        bst = 1;
        count = 1;
        maxi =mini = root->data;
        return 1;
    }

    int mx1 = INT_MIN,mx2 = INT_MIN,mn1 = INT_MAX,mn2 = INT_MAX,bst1 = 0,bst2 = 0,cnt1 = 0,cnt2 = 0;

    int x1 = maxSizeUtiliy(root->left,mx1,mn1,bst1,cnt1);
    int x2 = maxSizeUtiliy(root->right,mx2,mn2,bst2,cnt2);

    count = cnt1 + cnt2 + 1;
    maxi = max(root->data,max(mx1,mx2));
    mini = min(root->data,min(mn1,mn2));

    if(bst1&&bst2)
    {
        if(root->data>mx1&&root->data<mn2)
        {
            bst = 1;
            return count;
        }
        else
        {
            bst = 0;
            return max(x1,x2);
        }
    }
    else
    {
        bst = 0;
        return max(x1,x2);
    }
    return 0;
}

int largestBST(node *root)
{
    if(root==NULL)
        return 0;
    int mx1 = INT_MIN,mn1 = INT_MAX,bst1 = 0,cnt1 = 0;
    return maxSizeUtiliy(root,mx1,mn1,bst1,cnt1);
}


/* Driver program to test above functions*/
int main()
{
    /* Let us construct the following Tree
          50
       /      \
     10        60
    /  \       /  \
   5   20    55    70
            /     /  \
          45     65    80
  */

  struct node *root = newNode(50);
  root->left        = newNode(10);
  root->right       = newNode(60);
  root->left->left  = newNode(5);
  root->left->right = newNode(20);
  root->right->left  = newNode(55);
  root->right->left->left  = newNode(45);
  root->right->right = newNode(70);
  root->right->right->left = newNode(65);
  root->right->right->right = newNode(80);

  /* The complete tree is not BST as 45 is in right subtree of 50.
     The following subtree is the largest BST
        60
      /  \
    55    70
   /     /  \
 45     65    80
  */
  printf(" Size of the largest BST is %d", largestBST(root));

  getchar();
  return 0;
}
