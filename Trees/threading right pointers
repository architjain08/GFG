#include<bits/stdc++.h>
using namespace std;

struct node
{
    int data;
    bool isThread;

    node *left;
    node *right;
};


node *newNode(int d)
{
    node *temp = new node;
    temp->data = d;
    temp->isThread = false;
    temp->left  = temp->right = NULL;
    return temp;
}

void transform(node *root,node **last)
{
    if(root==NULL)
    {
        *last = NULL;
        return;
    }

    if(root->left==NULL&&root->right==NULL)
    {
        *last = root;
        return;
    }

    node *aux = NULL;
    transform(root->left,&aux);

    if(aux!=NULL)
    {
        aux->right =root;
        aux->isThread = true;
    }

    *last = root;

    transform(root->right,last);
}

node *mini(node *root)
{
    if(root==NULL)return root;

    while(root->left!=NULL)
    root =root->left;

    return root;

}
void inorder(node *root)
{
    if(root==NULL)return;

    root = mini(root);

    while(root!=NULL)
    {
        cout<<root->data<<" ";
        if(root->isThread)
            root = root->right;
        else
            root = mini(root->right);
    }

}

int main()
{
    /*       1
            / \
           2   3
          / \ / \
         4  5 6  7   */
    node *root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
    root->right->left = newNode(6);
    root->right->right = newNode(7);
    node *last = NULL;
    transform(root,&last);

    cout << "Inorder traversal of creeated threaded tree is\n";
    inorder(root);
    return 0;
}
